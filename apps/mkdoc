#!/bin/sh
# -*- tcl -*- A Tcl comment, whose contents don't matter \
exec tclsh "$0" "$@"

package require Tcl 8.6-
package require mkdoc

set USAGE [string map [list "\n    " "\n"] {
    Usage: __APP__ ?--help|--version|--license? INFILE OUTFILE ?--css file.css? 
                      ?--header header.html? ?--footer footer.html? ?--mathjax true? 
                      ?--javascript JSLIB|JSFile? ?--refresh 10? ?--base64 true?
}]
set HELP [string map [list "\n    " "\n"] {
    mkdoc - code documentation tool to process embedded Markdown markup
            given after "#'" comments

    Positional arguments (required):
    
        INFILE - input file with:
               - embedded Markdown comments: #' Markdown markup
               - pure Markdown code (file.md)

        OUTFILE - output file usually HTML or Markdown file,
                  file format is deduced on file extension .html or .md,
                  if OUTFILE is the `-` sign output is written to stdout

    Optional arguments:

        --help             - display this help page, and exit
        --version          - display version number, and exit
        --license          - display license information, and exit
        --css CSSFILE      - use the specified CSSFILE instead of internal default 
                             mkdoc.css
        --header HTMLFILE  - file with HTML code to be included after the body tag
        --footer HTMLFILE  - file with HTML code to be included before the closing
                             body tag                            
        --base64  BOOL     - should local images, css files and JavaScript files being embedded as base 64 codes, default: true                
        --javascript JSLIB - hightlightjs|file1,file2,... using these Javascript libs / files, default: NULL
        --mathjax BOOL     - Embed the Mathjax Javascript library to add LaTeX formulas, default: false
        --refresh INT      - Create a HTML page which does automatic refreshing after N seconds, default: 0
        
    Examples:

        # create manual page for mkdoc.tcl itself 
        __APP__ mkdoc.tcl mkdoc.html

        # create manual code for a CPP file using a custom style sheet
        __APP__ sample.cpp sample.html --css manual.css

        # extract code documentation as simple Markdown
        # ready to be processed further with pandoc
        __APP__ sample.cpp sample.md 

        # convert a Markdown file to HTML
        __APP__ sample.md sample.html
        
        # convert a Markdown file to HTML with own css, header and foot
        __APP__ sample.md sample.html --css my.css --footer foot.html --header head.html
        
        # convert a Markdown file to HTML parsing embedded Latex Formula
        # using \\( inline formula \\) or \\[ block formula syntax \\]
        
        __APP__ sample.md sample.html --javascript highlightjs
        
        # convert a Markdown file to HTML parsing embedded Latex Formula
        # using \\( inline formula \\) or \\[ block formula syntax \\]
        
        __APP__ sample.md sample.html --mathjax true 
        
    Author: @ Dr. Detlef Groth, Schwielowsee, 2019-2024

    License: BSD
}]


if {[lsearch -exact $argv {--version}] > -1} {
    puts "[package provide mkdoc]"
} elseif {[lsearch -exact $argv {--license}] > -1} {
    puts "BSD License - see manual page"
} elseif {[lsearch -exact $argv {--help}] > -1} {
    set usage [regsub -all {__APP__} $USAGE [info script]]
    puts $usage
    set help [regsub -all {__APP__} $HELP [info script]]
    puts $help
    
    exit 0
} elseif {[llength $argv] < 2} {
    set usage [regsub -all {__APP__} $USAGE [info script]]
    puts $usage
} elseif {[llength $argv] == 2} {
    if {[regexp {^-.} [lindex $argv 1]]} {
	puts stderr "Error: wrong outfile name [lindex $argv 1]"
	exit 1
    }
    mkdoc::mkdoc [lindex $argv 0] [lindex $argv 1]

} elseif {[llength $argv] > 2} {
    mkdoc::mkdoc {*}$argv
}

exit
